// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bank.proto

#include "bank.pb.h"
#include "bank.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bank {

static const char* bank_method_names[] = {
  "/bank.bank/BankCreate",
  "/bank.bank/CreateAccount",
  "/bank.bank/AddAmount",
  "/bank.bank/SubAmount",
  "/bank.bank/ListAccount",
};

std::unique_ptr< bank::Stub> bank::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< bank::Stub> stub(new bank::Stub(channel));
  return stub;
}

bank::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_BankCreate_(bank_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateAccount_(bank_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddAmount_(bank_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubAmount_(bank_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListAccount_(bank_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status bank::Stub::BankCreate(::grpc::ClientContext* context, const ::bank::BankCreateReq& request, ::bank::BankCreateResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_BankCreate_, context, request, response);
}

void bank::Stub::experimental_async::BankCreate(::grpc::ClientContext* context, const ::bank::BankCreateReq* request, ::bank::BankCreateResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_BankCreate_, context, request, response, std::move(f));
}

void bank::Stub::experimental_async::BankCreate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::BankCreateResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_BankCreate_, context, request, response, std::move(f));
}

void bank::Stub::experimental_async::BankCreate(::grpc::ClientContext* context, const ::bank::BankCreateReq* request, ::bank::BankCreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_BankCreate_, context, request, response, reactor);
}

void bank::Stub::experimental_async::BankCreate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::BankCreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_BankCreate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::BankCreateResp>* bank::Stub::AsyncBankCreateRaw(::grpc::ClientContext* context, const ::bank::BankCreateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::bank::BankCreateResp>::Create(channel_.get(), cq, rpcmethod_BankCreate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bank::BankCreateResp>* bank::Stub::PrepareAsyncBankCreateRaw(::grpc::ClientContext* context, const ::bank::BankCreateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::bank::BankCreateResp>::Create(channel_.get(), cq, rpcmethod_BankCreate_, context, request, false);
}

::grpc::Status bank::Stub::CreateAccount(::grpc::ClientContext* context, const ::bank::AccountCreateReq& request, ::bank::AccountCreateResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateAccount_, context, request, response);
}

void bank::Stub::experimental_async::CreateAccount(::grpc::ClientContext* context, const ::bank::AccountCreateReq* request, ::bank::AccountCreateResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateAccount_, context, request, response, std::move(f));
}

void bank::Stub::experimental_async::CreateAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AccountCreateResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateAccount_, context, request, response, std::move(f));
}

void bank::Stub::experimental_async::CreateAccount(::grpc::ClientContext* context, const ::bank::AccountCreateReq* request, ::bank::AccountCreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateAccount_, context, request, response, reactor);
}

void bank::Stub::experimental_async::CreateAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AccountCreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_CreateAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::AccountCreateResp>* bank::Stub::AsyncCreateAccountRaw(::grpc::ClientContext* context, const ::bank::AccountCreateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::bank::AccountCreateResp>::Create(channel_.get(), cq, rpcmethod_CreateAccount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bank::AccountCreateResp>* bank::Stub::PrepareAsyncCreateAccountRaw(::grpc::ClientContext* context, const ::bank::AccountCreateReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::bank::AccountCreateResp>::Create(channel_.get(), cq, rpcmethod_CreateAccount_, context, request, false);
}

::grpc::Status bank::Stub::AddAmount(::grpc::ClientContext* context, const ::bank::AmountAddReq& request, ::bank::AmountAddResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddAmount_, context, request, response);
}

void bank::Stub::experimental_async::AddAmount(::grpc::ClientContext* context, const ::bank::AmountAddReq* request, ::bank::AmountAddResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddAmount_, context, request, response, std::move(f));
}

void bank::Stub::experimental_async::AddAmount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AmountAddResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddAmount_, context, request, response, std::move(f));
}

void bank::Stub::experimental_async::AddAmount(::grpc::ClientContext* context, const ::bank::AmountAddReq* request, ::bank::AmountAddResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddAmount_, context, request, response, reactor);
}

void bank::Stub::experimental_async::AddAmount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AmountAddResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddAmount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::AmountAddResp>* bank::Stub::AsyncAddAmountRaw(::grpc::ClientContext* context, const ::bank::AmountAddReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::bank::AmountAddResp>::Create(channel_.get(), cq, rpcmethod_AddAmount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bank::AmountAddResp>* bank::Stub::PrepareAsyncAddAmountRaw(::grpc::ClientContext* context, const ::bank::AmountAddReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::bank::AmountAddResp>::Create(channel_.get(), cq, rpcmethod_AddAmount_, context, request, false);
}

::grpc::Status bank::Stub::SubAmount(::grpc::ClientContext* context, const ::bank::AmountSubReq& request, ::bank::AmountSubResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SubAmount_, context, request, response);
}

void bank::Stub::experimental_async::SubAmount(::grpc::ClientContext* context, const ::bank::AmountSubReq* request, ::bank::AmountSubResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SubAmount_, context, request, response, std::move(f));
}

void bank::Stub::experimental_async::SubAmount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AmountSubResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SubAmount_, context, request, response, std::move(f));
}

void bank::Stub::experimental_async::SubAmount(::grpc::ClientContext* context, const ::bank::AmountSubReq* request, ::bank::AmountSubResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SubAmount_, context, request, response, reactor);
}

void bank::Stub::experimental_async::SubAmount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AmountSubResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SubAmount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::AmountSubResp>* bank::Stub::AsyncSubAmountRaw(::grpc::ClientContext* context, const ::bank::AmountSubReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::bank::AmountSubResp>::Create(channel_.get(), cq, rpcmethod_SubAmount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bank::AmountSubResp>* bank::Stub::PrepareAsyncSubAmountRaw(::grpc::ClientContext* context, const ::bank::AmountSubReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::bank::AmountSubResp>::Create(channel_.get(), cq, rpcmethod_SubAmount_, context, request, false);
}

::grpc::Status bank::Stub::ListAccount(::grpc::ClientContext* context, const ::bank::Empty& request, ::bank::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListAccount_, context, request, response);
}

void bank::Stub::experimental_async::ListAccount(::grpc::ClientContext* context, const ::bank::Empty* request, ::bank::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListAccount_, context, request, response, std::move(f));
}

void bank::Stub::experimental_async::ListAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListAccount_, context, request, response, std::move(f));
}

void bank::Stub::experimental_async::ListAccount(::grpc::ClientContext* context, const ::bank::Empty* request, ::bank::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListAccount_, context, request, response, reactor);
}

void bank::Stub::experimental_async::ListAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::Empty>* bank::Stub::AsyncListAccountRaw(::grpc::ClientContext* context, const ::bank::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::bank::Empty>::Create(channel_.get(), cq, rpcmethod_ListAccount_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bank::Empty>* bank::Stub::PrepareAsyncListAccountRaw(::grpc::ClientContext* context, const ::bank::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::bank::Empty>::Create(channel_.get(), cq, rpcmethod_ListAccount_, context, request, false);
}

bank::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      bank_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< bank::Service, ::bank::BankCreateReq, ::bank::BankCreateResp>(
          [](bank::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::bank::BankCreateReq* req,
             ::bank::BankCreateResp* resp) {
               return service->BankCreate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      bank_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< bank::Service, ::bank::AccountCreateReq, ::bank::AccountCreateResp>(
          [](bank::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::bank::AccountCreateReq* req,
             ::bank::AccountCreateResp* resp) {
               return service->CreateAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      bank_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< bank::Service, ::bank::AmountAddReq, ::bank::AmountAddResp>(
          [](bank::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::bank::AmountAddReq* req,
             ::bank::AmountAddResp* resp) {
               return service->AddAmount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      bank_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< bank::Service, ::bank::AmountSubReq, ::bank::AmountSubResp>(
          [](bank::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::bank::AmountSubReq* req,
             ::bank::AmountSubResp* resp) {
               return service->SubAmount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      bank_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< bank::Service, ::bank::Empty, ::bank::Empty>(
          [](bank::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::bank::Empty* req,
             ::bank::Empty* resp) {
               return service->ListAccount(ctx, req, resp);
             }, this)));
}

bank::Service::~Service() {
}

::grpc::Status bank::Service::BankCreate(::grpc::ServerContext* context, const ::bank::BankCreateReq* request, ::bank::BankCreateResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status bank::Service::CreateAccount(::grpc::ServerContext* context, const ::bank::AccountCreateReq* request, ::bank::AccountCreateResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status bank::Service::AddAmount(::grpc::ServerContext* context, const ::bank::AmountAddReq* request, ::bank::AmountAddResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status bank::Service::SubAmount(::grpc::ServerContext* context, const ::bank::AmountSubReq* request, ::bank::AmountSubResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status bank::Service::ListAccount(::grpc::ServerContext* context, const ::bank::Empty* request, ::bank::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bank

