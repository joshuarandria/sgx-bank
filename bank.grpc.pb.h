// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bank.proto
#ifndef GRPC_bank_2eproto__INCLUDED
#define GRPC_bank_2eproto__INCLUDED

#include "bank.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace bank {

class bank final {
 public:
  static constexpr char const* service_full_name() {
    return "bank.bank";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status BankCreate(::grpc::ClientContext* context, const ::bank::BankCreateReq& request, ::bank::BankCreateResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bank::BankCreateResp>> AsyncBankCreate(::grpc::ClientContext* context, const ::bank::BankCreateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bank::BankCreateResp>>(AsyncBankCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bank::BankCreateResp>> PrepareAsyncBankCreate(::grpc::ClientContext* context, const ::bank::BankCreateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bank::BankCreateResp>>(PrepareAsyncBankCreateRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateAccount(::grpc::ClientContext* context, const ::bank::AccountCreateReq& request, ::bank::AccountCreateResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bank::AccountCreateResp>> AsyncCreateAccount(::grpc::ClientContext* context, const ::bank::AccountCreateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bank::AccountCreateResp>>(AsyncCreateAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bank::AccountCreateResp>> PrepareAsyncCreateAccount(::grpc::ClientContext* context, const ::bank::AccountCreateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bank::AccountCreateResp>>(PrepareAsyncCreateAccountRaw(context, request, cq));
    }
    virtual ::grpc::Status AddAmount(::grpc::ClientContext* context, const ::bank::AmountAddReq& request, ::bank::AmountAddResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bank::AmountAddResp>> AsyncAddAmount(::grpc::ClientContext* context, const ::bank::AmountAddReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bank::AmountAddResp>>(AsyncAddAmountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bank::AmountAddResp>> PrepareAsyncAddAmount(::grpc::ClientContext* context, const ::bank::AmountAddReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bank::AmountAddResp>>(PrepareAsyncAddAmountRaw(context, request, cq));
    }
    virtual ::grpc::Status SubAmount(::grpc::ClientContext* context, const ::bank::AmountSubReq& request, ::bank::AmountSubResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bank::AmountSubResp>> AsyncSubAmount(::grpc::ClientContext* context, const ::bank::AmountSubReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bank::AmountSubResp>>(AsyncSubAmountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bank::AmountSubResp>> PrepareAsyncSubAmount(::grpc::ClientContext* context, const ::bank::AmountSubReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bank::AmountSubResp>>(PrepareAsyncSubAmountRaw(context, request, cq));
    }
    virtual ::grpc::Status ListAccount(::grpc::ClientContext* context, const ::bank::Empty& request, ::bank::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bank::Empty>> AsyncListAccount(::grpc::ClientContext* context, const ::bank::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bank::Empty>>(AsyncListAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bank::Empty>> PrepareAsyncListAccount(::grpc::ClientContext* context, const ::bank::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::bank::Empty>>(PrepareAsyncListAccountRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void BankCreate(::grpc::ClientContext* context, const ::bank::BankCreateReq* request, ::bank::BankCreateResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BankCreate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::BankCreateResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void BankCreate(::grpc::ClientContext* context, const ::bank::BankCreateReq* request, ::bank::BankCreateResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void BankCreate(::grpc::ClientContext* context, const ::bank::BankCreateReq* request, ::bank::BankCreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void BankCreate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::BankCreateResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void BankCreate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::BankCreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CreateAccount(::grpc::ClientContext* context, const ::bank::AccountCreateReq* request, ::bank::AccountCreateResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AccountCreateResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateAccount(::grpc::ClientContext* context, const ::bank::AccountCreateReq* request, ::bank::AccountCreateResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateAccount(::grpc::ClientContext* context, const ::bank::AccountCreateReq* request, ::bank::AccountCreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AccountCreateResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AccountCreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void AddAmount(::grpc::ClientContext* context, const ::bank::AmountAddReq* request, ::bank::AmountAddResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddAmount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AmountAddResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddAmount(::grpc::ClientContext* context, const ::bank::AmountAddReq* request, ::bank::AmountAddResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddAmount(::grpc::ClientContext* context, const ::bank::AmountAddReq* request, ::bank::AmountAddResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddAmount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AmountAddResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddAmount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AmountAddResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SubAmount(::grpc::ClientContext* context, const ::bank::AmountSubReq* request, ::bank::AmountSubResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SubAmount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AmountSubResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubAmount(::grpc::ClientContext* context, const ::bank::AmountSubReq* request, ::bank::AmountSubResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubAmount(::grpc::ClientContext* context, const ::bank::AmountSubReq* request, ::bank::AmountSubResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubAmount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AmountSubResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SubAmount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AmountSubResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void ListAccount(::grpc::ClientContext* context, const ::bank::Empty* request, ::bank::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListAccount(::grpc::ClientContext* context, const ::bank::Empty* request, ::bank::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListAccount(::grpc::ClientContext* context, const ::bank::Empty* request, ::bank::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bank::BankCreateResp>* AsyncBankCreateRaw(::grpc::ClientContext* context, const ::bank::BankCreateReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bank::BankCreateResp>* PrepareAsyncBankCreateRaw(::grpc::ClientContext* context, const ::bank::BankCreateReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bank::AccountCreateResp>* AsyncCreateAccountRaw(::grpc::ClientContext* context, const ::bank::AccountCreateReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bank::AccountCreateResp>* PrepareAsyncCreateAccountRaw(::grpc::ClientContext* context, const ::bank::AccountCreateReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bank::AmountAddResp>* AsyncAddAmountRaw(::grpc::ClientContext* context, const ::bank::AmountAddReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bank::AmountAddResp>* PrepareAsyncAddAmountRaw(::grpc::ClientContext* context, const ::bank::AmountAddReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bank::AmountSubResp>* AsyncSubAmountRaw(::grpc::ClientContext* context, const ::bank::AmountSubReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bank::AmountSubResp>* PrepareAsyncSubAmountRaw(::grpc::ClientContext* context, const ::bank::AmountSubReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bank::Empty>* AsyncListAccountRaw(::grpc::ClientContext* context, const ::bank::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::bank::Empty>* PrepareAsyncListAccountRaw(::grpc::ClientContext* context, const ::bank::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status BankCreate(::grpc::ClientContext* context, const ::bank::BankCreateReq& request, ::bank::BankCreateResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bank::BankCreateResp>> AsyncBankCreate(::grpc::ClientContext* context, const ::bank::BankCreateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bank::BankCreateResp>>(AsyncBankCreateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bank::BankCreateResp>> PrepareAsyncBankCreate(::grpc::ClientContext* context, const ::bank::BankCreateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bank::BankCreateResp>>(PrepareAsyncBankCreateRaw(context, request, cq));
    }
    ::grpc::Status CreateAccount(::grpc::ClientContext* context, const ::bank::AccountCreateReq& request, ::bank::AccountCreateResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bank::AccountCreateResp>> AsyncCreateAccount(::grpc::ClientContext* context, const ::bank::AccountCreateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bank::AccountCreateResp>>(AsyncCreateAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bank::AccountCreateResp>> PrepareAsyncCreateAccount(::grpc::ClientContext* context, const ::bank::AccountCreateReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bank::AccountCreateResp>>(PrepareAsyncCreateAccountRaw(context, request, cq));
    }
    ::grpc::Status AddAmount(::grpc::ClientContext* context, const ::bank::AmountAddReq& request, ::bank::AmountAddResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bank::AmountAddResp>> AsyncAddAmount(::grpc::ClientContext* context, const ::bank::AmountAddReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bank::AmountAddResp>>(AsyncAddAmountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bank::AmountAddResp>> PrepareAsyncAddAmount(::grpc::ClientContext* context, const ::bank::AmountAddReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bank::AmountAddResp>>(PrepareAsyncAddAmountRaw(context, request, cq));
    }
    ::grpc::Status SubAmount(::grpc::ClientContext* context, const ::bank::AmountSubReq& request, ::bank::AmountSubResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bank::AmountSubResp>> AsyncSubAmount(::grpc::ClientContext* context, const ::bank::AmountSubReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bank::AmountSubResp>>(AsyncSubAmountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bank::AmountSubResp>> PrepareAsyncSubAmount(::grpc::ClientContext* context, const ::bank::AmountSubReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bank::AmountSubResp>>(PrepareAsyncSubAmountRaw(context, request, cq));
    }
    ::grpc::Status ListAccount(::grpc::ClientContext* context, const ::bank::Empty& request, ::bank::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bank::Empty>> AsyncListAccount(::grpc::ClientContext* context, const ::bank::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bank::Empty>>(AsyncListAccountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bank::Empty>> PrepareAsyncListAccount(::grpc::ClientContext* context, const ::bank::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::bank::Empty>>(PrepareAsyncListAccountRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void BankCreate(::grpc::ClientContext* context, const ::bank::BankCreateReq* request, ::bank::BankCreateResp* response, std::function<void(::grpc::Status)>) override;
      void BankCreate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::BankCreateResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void BankCreate(::grpc::ClientContext* context, const ::bank::BankCreateReq* request, ::bank::BankCreateResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void BankCreate(::grpc::ClientContext* context, const ::bank::BankCreateReq* request, ::bank::BankCreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void BankCreate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::BankCreateResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void BankCreate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::BankCreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateAccount(::grpc::ClientContext* context, const ::bank::AccountCreateReq* request, ::bank::AccountCreateResp* response, std::function<void(::grpc::Status)>) override;
      void CreateAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AccountCreateResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateAccount(::grpc::ClientContext* context, const ::bank::AccountCreateReq* request, ::bank::AccountCreateResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateAccount(::grpc::ClientContext* context, const ::bank::AccountCreateReq* request, ::bank::AccountCreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AccountCreateResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AccountCreateResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddAmount(::grpc::ClientContext* context, const ::bank::AmountAddReq* request, ::bank::AmountAddResp* response, std::function<void(::grpc::Status)>) override;
      void AddAmount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AmountAddResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddAmount(::grpc::ClientContext* context, const ::bank::AmountAddReq* request, ::bank::AmountAddResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddAmount(::grpc::ClientContext* context, const ::bank::AmountAddReq* request, ::bank::AmountAddResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddAmount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AmountAddResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddAmount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AmountAddResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SubAmount(::grpc::ClientContext* context, const ::bank::AmountSubReq* request, ::bank::AmountSubResp* response, std::function<void(::grpc::Status)>) override;
      void SubAmount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AmountSubResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubAmount(::grpc::ClientContext* context, const ::bank::AmountSubReq* request, ::bank::AmountSubResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubAmount(::grpc::ClientContext* context, const ::bank::AmountSubReq* request, ::bank::AmountSubResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubAmount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AmountSubResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SubAmount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::AmountSubResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListAccount(::grpc::ClientContext* context, const ::bank::Empty* request, ::bank::Empty* response, std::function<void(::grpc::Status)>) override;
      void ListAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListAccount(::grpc::ClientContext* context, const ::bank::Empty* request, ::bank::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListAccount(::grpc::ClientContext* context, const ::bank::Empty* request, ::bank::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListAccount(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::bank::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::bank::BankCreateResp>* AsyncBankCreateRaw(::grpc::ClientContext* context, const ::bank::BankCreateReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bank::BankCreateResp>* PrepareAsyncBankCreateRaw(::grpc::ClientContext* context, const ::bank::BankCreateReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bank::AccountCreateResp>* AsyncCreateAccountRaw(::grpc::ClientContext* context, const ::bank::AccountCreateReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bank::AccountCreateResp>* PrepareAsyncCreateAccountRaw(::grpc::ClientContext* context, const ::bank::AccountCreateReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bank::AmountAddResp>* AsyncAddAmountRaw(::grpc::ClientContext* context, const ::bank::AmountAddReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bank::AmountAddResp>* PrepareAsyncAddAmountRaw(::grpc::ClientContext* context, const ::bank::AmountAddReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bank::AmountSubResp>* AsyncSubAmountRaw(::grpc::ClientContext* context, const ::bank::AmountSubReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bank::AmountSubResp>* PrepareAsyncSubAmountRaw(::grpc::ClientContext* context, const ::bank::AmountSubReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bank::Empty>* AsyncListAccountRaw(::grpc::ClientContext* context, const ::bank::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::bank::Empty>* PrepareAsyncListAccountRaw(::grpc::ClientContext* context, const ::bank::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_BankCreate_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateAccount_;
    const ::grpc::internal::RpcMethod rpcmethod_AddAmount_;
    const ::grpc::internal::RpcMethod rpcmethod_SubAmount_;
    const ::grpc::internal::RpcMethod rpcmethod_ListAccount_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status BankCreate(::grpc::ServerContext* context, const ::bank::BankCreateReq* request, ::bank::BankCreateResp* response);
    virtual ::grpc::Status CreateAccount(::grpc::ServerContext* context, const ::bank::AccountCreateReq* request, ::bank::AccountCreateResp* response);
    virtual ::grpc::Status AddAmount(::grpc::ServerContext* context, const ::bank::AmountAddReq* request, ::bank::AmountAddResp* response);
    virtual ::grpc::Status SubAmount(::grpc::ServerContext* context, const ::bank::AmountSubReq* request, ::bank::AmountSubResp* response);
    virtual ::grpc::Status ListAccount(::grpc::ServerContext* context, const ::bank::Empty* request, ::bank::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_BankCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BankCreate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_BankCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BankCreate(::grpc::ServerContext* /*context*/, const ::bank::BankCreateReq* /*request*/, ::bank::BankCreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBankCreate(::grpc::ServerContext* context, ::bank::BankCreateReq* request, ::grpc::ServerAsyncResponseWriter< ::bank::BankCreateResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateAccount() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::bank::AccountCreateReq* /*request*/, ::bank::AccountCreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAccount(::grpc::ServerContext* context, ::bank::AccountCreateReq* request, ::grpc::ServerAsyncResponseWriter< ::bank::AccountCreateResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddAmount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddAmount() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AddAmount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAmount(::grpc::ServerContext* /*context*/, const ::bank::AmountAddReq* /*request*/, ::bank::AmountAddResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddAmount(::grpc::ServerContext* context, ::bank::AmountAddReq* request, ::grpc::ServerAsyncResponseWriter< ::bank::AmountAddResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubAmount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubAmount() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SubAmount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubAmount(::grpc::ServerContext* /*context*/, const ::bank::AmountSubReq* /*request*/, ::bank::AmountSubResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubAmount(::grpc::ServerContext* context, ::bank::AmountSubReq* request, ::grpc::ServerAsyncResponseWriter< ::bank::AmountSubResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListAccount() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAccount(::grpc::ServerContext* /*context*/, const ::bank::Empty* /*request*/, ::bank::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAccount(::grpc::ServerContext* context, ::bank::Empty* request, ::grpc::ServerAsyncResponseWriter< ::bank::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_BankCreate<WithAsyncMethod_CreateAccount<WithAsyncMethod_AddAmount<WithAsyncMethod_SubAmount<WithAsyncMethod_ListAccount<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BankCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_BankCreate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::bank::BankCreateReq, ::bank::BankCreateResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bank::BankCreateReq* request, ::bank::BankCreateResp* response) { return this->BankCreate(context, request, response); }));}
    void SetMessageAllocatorFor_BankCreate(
        ::grpc::experimental::MessageAllocator< ::bank::BankCreateReq, ::bank::BankCreateResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::bank::BankCreateReq, ::bank::BankCreateResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_BankCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BankCreate(::grpc::ServerContext* /*context*/, const ::bank::BankCreateReq* /*request*/, ::bank::BankCreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* BankCreate(
      ::grpc::CallbackServerContext* /*context*/, const ::bank::BankCreateReq* /*request*/, ::bank::BankCreateResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* BankCreate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bank::BankCreateReq* /*request*/, ::bank::BankCreateResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::bank::AccountCreateReq, ::bank::AccountCreateResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bank::AccountCreateReq* request, ::bank::AccountCreateResp* response) { return this->CreateAccount(context, request, response); }));}
    void SetMessageAllocatorFor_CreateAccount(
        ::grpc::experimental::MessageAllocator< ::bank::AccountCreateReq, ::bank::AccountCreateResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::bank::AccountCreateReq, ::bank::AccountCreateResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::bank::AccountCreateReq* /*request*/, ::bank::AccountCreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::bank::AccountCreateReq* /*request*/, ::bank::AccountCreateResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bank::AccountCreateReq* /*request*/, ::bank::AccountCreateResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddAmount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddAmount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::bank::AmountAddReq, ::bank::AmountAddResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bank::AmountAddReq* request, ::bank::AmountAddResp* response) { return this->AddAmount(context, request, response); }));}
    void SetMessageAllocatorFor_AddAmount(
        ::grpc::experimental::MessageAllocator< ::bank::AmountAddReq, ::bank::AmountAddResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::bank::AmountAddReq, ::bank::AmountAddResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddAmount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAmount(::grpc::ServerContext* /*context*/, const ::bank::AmountAddReq* /*request*/, ::bank::AmountAddResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddAmount(
      ::grpc::CallbackServerContext* /*context*/, const ::bank::AmountAddReq* /*request*/, ::bank::AmountAddResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddAmount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bank::AmountAddReq* /*request*/, ::bank::AmountAddResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubAmount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubAmount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::bank::AmountSubReq, ::bank::AmountSubResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bank::AmountSubReq* request, ::bank::AmountSubResp* response) { return this->SubAmount(context, request, response); }));}
    void SetMessageAllocatorFor_SubAmount(
        ::grpc::experimental::MessageAllocator< ::bank::AmountSubReq, ::bank::AmountSubResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::bank::AmountSubReq, ::bank::AmountSubResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SubAmount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubAmount(::grpc::ServerContext* /*context*/, const ::bank::AmountSubReq* /*request*/, ::bank::AmountSubResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubAmount(
      ::grpc::CallbackServerContext* /*context*/, const ::bank::AmountSubReq* /*request*/, ::bank::AmountSubResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubAmount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bank::AmountSubReq* /*request*/, ::bank::AmountSubResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::bank::Empty, ::bank::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::bank::Empty* request, ::bank::Empty* response) { return this->ListAccount(context, request, response); }));}
    void SetMessageAllocatorFor_ListAccount(
        ::grpc::experimental::MessageAllocator< ::bank::Empty, ::bank::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::bank::Empty, ::bank::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAccount(::grpc::ServerContext* /*context*/, const ::bank::Empty* /*request*/, ::bank::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::bank::Empty* /*request*/, ::bank::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::bank::Empty* /*request*/, ::bank::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_BankCreate<ExperimentalWithCallbackMethod_CreateAccount<ExperimentalWithCallbackMethod_AddAmount<ExperimentalWithCallbackMethod_SubAmount<ExperimentalWithCallbackMethod_ListAccount<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_BankCreate<ExperimentalWithCallbackMethod_CreateAccount<ExperimentalWithCallbackMethod_AddAmount<ExperimentalWithCallbackMethod_SubAmount<ExperimentalWithCallbackMethod_ListAccount<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_BankCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BankCreate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_BankCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BankCreate(::grpc::ServerContext* /*context*/, const ::bank::BankCreateReq* /*request*/, ::bank::BankCreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateAccount() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::bank::AccountCreateReq* /*request*/, ::bank::AccountCreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddAmount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddAmount() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AddAmount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAmount(::grpc::ServerContext* /*context*/, const ::bank::AmountAddReq* /*request*/, ::bank::AmountAddResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubAmount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubAmount() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SubAmount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubAmount(::grpc::ServerContext* /*context*/, const ::bank::AmountSubReq* /*request*/, ::bank::AmountSubResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListAccount() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAccount(::grpc::ServerContext* /*context*/, const ::bank::Empty* /*request*/, ::bank::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_BankCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BankCreate() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_BankCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BankCreate(::grpc::ServerContext* /*context*/, const ::bank::BankCreateReq* /*request*/, ::bank::BankCreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBankCreate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateAccount() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::bank::AccountCreateReq* /*request*/, ::bank::AccountCreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddAmount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddAmount() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AddAmount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAmount(::grpc::ServerContext* /*context*/, const ::bank::AmountAddReq* /*request*/, ::bank::AmountAddResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddAmount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubAmount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubAmount() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SubAmount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubAmount(::grpc::ServerContext* /*context*/, const ::bank::AmountSubReq* /*request*/, ::bank::AmountSubResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubAmount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListAccount() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ListAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAccount(::grpc::ServerContext* /*context*/, const ::bank::Empty* /*request*/, ::bank::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAccount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BankCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_BankCreate() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BankCreate(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_BankCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BankCreate(::grpc::ServerContext* /*context*/, const ::bank::BankCreateReq* /*request*/, ::bank::BankCreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* BankCreate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* BankCreate(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateAccount(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::bank::AccountCreateReq* /*request*/, ::bank::AccountCreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddAmount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddAmount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddAmount(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddAmount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddAmount(::grpc::ServerContext* /*context*/, const ::bank::AmountAddReq* /*request*/, ::bank::AmountAddResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddAmount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddAmount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubAmount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubAmount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SubAmount(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubAmount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubAmount(::grpc::ServerContext* /*context*/, const ::bank::AmountSubReq* /*request*/, ::bank::AmountSubResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SubAmount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SubAmount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListAccount() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListAccount(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAccount(::grpc::ServerContext* /*context*/, const ::bank::Empty* /*request*/, ::bank::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListAccount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListAccount(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BankCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BankCreate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bank::BankCreateReq, ::bank::BankCreateResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::bank::BankCreateReq, ::bank::BankCreateResp>* streamer) {
                       return this->StreamedBankCreate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_BankCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BankCreate(::grpc::ServerContext* /*context*/, const ::bank::BankCreateReq* /*request*/, ::bank::BankCreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBankCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bank::BankCreateReq,::bank::BankCreateResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateAccount() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bank::AccountCreateReq, ::bank::AccountCreateResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::bank::AccountCreateReq, ::bank::AccountCreateResp>* streamer) {
                       return this->StreamedCreateAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateAccount(::grpc::ServerContext* /*context*/, const ::bank::AccountCreateReq* /*request*/, ::bank::AccountCreateResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bank::AccountCreateReq,::bank::AccountCreateResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddAmount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddAmount() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bank::AmountAddReq, ::bank::AmountAddResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::bank::AmountAddReq, ::bank::AmountAddResp>* streamer) {
                       return this->StreamedAddAmount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddAmount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddAmount(::grpc::ServerContext* /*context*/, const ::bank::AmountAddReq* /*request*/, ::bank::AmountAddResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddAmount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bank::AmountAddReq,::bank::AmountAddResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubAmount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SubAmount() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bank::AmountSubReq, ::bank::AmountSubResp>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::bank::AmountSubReq, ::bank::AmountSubResp>* streamer) {
                       return this->StreamedSubAmount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SubAmount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubAmount(::grpc::ServerContext* /*context*/, const ::bank::AmountSubReq* /*request*/, ::bank::AmountSubResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubAmount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bank::AmountSubReq,::bank::AmountSubResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAccount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListAccount() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::bank::Empty, ::bank::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::bank::Empty, ::bank::Empty>* streamer) {
                       return this->StreamedListAccount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListAccount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAccount(::grpc::ServerContext* /*context*/, const ::bank::Empty* /*request*/, ::bank::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAccount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::bank::Empty,::bank::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_BankCreate<WithStreamedUnaryMethod_CreateAccount<WithStreamedUnaryMethod_AddAmount<WithStreamedUnaryMethod_SubAmount<WithStreamedUnaryMethod_ListAccount<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_BankCreate<WithStreamedUnaryMethod_CreateAccount<WithStreamedUnaryMethod_AddAmount<WithStreamedUnaryMethod_SubAmount<WithStreamedUnaryMethod_ListAccount<Service > > > > > StreamedService;
};

}  // namespace bank


#endif  // GRPC_bank_2eproto__INCLUDED
