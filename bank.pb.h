// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bank.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bank_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bank_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bank_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bank_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bank_2eproto;
namespace bank {
class AccountCreateReq;
class AccountCreateReqDefaultTypeInternal;
extern AccountCreateReqDefaultTypeInternal _AccountCreateReq_default_instance_;
class AccountCreateResp;
class AccountCreateRespDefaultTypeInternal;
extern AccountCreateRespDefaultTypeInternal _AccountCreateResp_default_instance_;
class AmountAddReq;
class AmountAddReqDefaultTypeInternal;
extern AmountAddReqDefaultTypeInternal _AmountAddReq_default_instance_;
class AmountAddResp;
class AmountAddRespDefaultTypeInternal;
extern AmountAddRespDefaultTypeInternal _AmountAddResp_default_instance_;
class AmountSubReq;
class AmountSubReqDefaultTypeInternal;
extern AmountSubReqDefaultTypeInternal _AmountSubReq_default_instance_;
class AmountSubResp;
class AmountSubRespDefaultTypeInternal;
extern AmountSubRespDefaultTypeInternal _AmountSubResp_default_instance_;
class BankCreateReq;
class BankCreateReqDefaultTypeInternal;
extern BankCreateReqDefaultTypeInternal _BankCreateReq_default_instance_;
class BankCreateResp;
class BankCreateRespDefaultTypeInternal;
extern BankCreateRespDefaultTypeInternal _BankCreateResp_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
}  // namespace bank
PROTOBUF_NAMESPACE_OPEN
template<> ::bank::AccountCreateReq* Arena::CreateMaybeMessage<::bank::AccountCreateReq>(Arena*);
template<> ::bank::AccountCreateResp* Arena::CreateMaybeMessage<::bank::AccountCreateResp>(Arena*);
template<> ::bank::AmountAddReq* Arena::CreateMaybeMessage<::bank::AmountAddReq>(Arena*);
template<> ::bank::AmountAddResp* Arena::CreateMaybeMessage<::bank::AmountAddResp>(Arena*);
template<> ::bank::AmountSubReq* Arena::CreateMaybeMessage<::bank::AmountSubReq>(Arena*);
template<> ::bank::AmountSubResp* Arena::CreateMaybeMessage<::bank::AmountSubResp>(Arena*);
template<> ::bank::BankCreateReq* Arena::CreateMaybeMessage<::bank::BankCreateReq>(Arena*);
template<> ::bank::BankCreateResp* Arena::CreateMaybeMessage<::bank::BankCreateResp>(Arena*);
template<> ::bank::Empty* Arena::CreateMaybeMessage<::bank::Empty>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bank {

// ===================================================================

class BankCreateReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.BankCreateReq) */ {
 public:
  inline BankCreateReq() : BankCreateReq(nullptr) {};
  virtual ~BankCreateReq();

  BankCreateReq(const BankCreateReq& from);
  BankCreateReq(BankCreateReq&& from) noexcept
    : BankCreateReq() {
    *this = ::std::move(from);
  }

  inline BankCreateReq& operator=(const BankCreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline BankCreateReq& operator=(BankCreateReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BankCreateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BankCreateReq* internal_default_instance() {
    return reinterpret_cast<const BankCreateReq*>(
               &_BankCreateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BankCreateReq& a, BankCreateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(BankCreateReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BankCreateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BankCreateReq* New() const final {
    return CreateMaybeMessage<BankCreateReq>(nullptr);
  }

  BankCreateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BankCreateReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BankCreateReq& from);
  void MergeFrom(const BankCreateReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BankCreateReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.BankCreateReq";
  }
  protected:
  explicit BankCreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bank_2eproto);
    return ::descriptor_table_bank_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapFieldNumber = 1,
  };
  // int64 cap = 1;
  void clear_cap();
  ::PROTOBUF_NAMESPACE_ID::int64 cap() const;
  void set_cap(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cap() const;
  void _internal_set_cap(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bank.BankCreateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 cap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class BankCreateResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.BankCreateResp) */ {
 public:
  inline BankCreateResp() : BankCreateResp(nullptr) {};
  virtual ~BankCreateResp();

  BankCreateResp(const BankCreateResp& from);
  BankCreateResp(BankCreateResp&& from) noexcept
    : BankCreateResp() {
    *this = ::std::move(from);
  }

  inline BankCreateResp& operator=(const BankCreateResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline BankCreateResp& operator=(BankCreateResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BankCreateResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BankCreateResp* internal_default_instance() {
    return reinterpret_cast<const BankCreateResp*>(
               &_BankCreateResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BankCreateResp& a, BankCreateResp& b) {
    a.Swap(&b);
  }
  inline void Swap(BankCreateResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BankCreateResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BankCreateResp* New() const final {
    return CreateMaybeMessage<BankCreateResp>(nullptr);
  }

  BankCreateResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BankCreateResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BankCreateResp& from);
  void MergeFrom(const BankCreateResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BankCreateResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.BankCreateResp";
  }
  protected:
  explicit BankCreateResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bank_2eproto);
    return ::descriptor_table_bank_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCapFieldNumber = 1,
  };
  // int64 cap = 1;
  void clear_cap();
  ::PROTOBUF_NAMESPACE_ID::int64 cap() const;
  void set_cap(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cap() const;
  void _internal_set_cap(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bank.BankCreateResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 cap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class AccountCreateReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.AccountCreateReq) */ {
 public:
  inline AccountCreateReq() : AccountCreateReq(nullptr) {};
  virtual ~AccountCreateReq();

  AccountCreateReq(const AccountCreateReq& from);
  AccountCreateReq(AccountCreateReq&& from) noexcept
    : AccountCreateReq() {
    *this = ::std::move(from);
  }

  inline AccountCreateReq& operator=(const AccountCreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountCreateReq& operator=(AccountCreateReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountCreateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountCreateReq* internal_default_instance() {
    return reinterpret_cast<const AccountCreateReq*>(
               &_AccountCreateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AccountCreateReq& a, AccountCreateReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountCreateReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountCreateReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountCreateReq* New() const final {
    return CreateMaybeMessage<AccountCreateReq>(nullptr);
  }

  AccountCreateReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountCreateReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountCreateReq& from);
  void MergeFrom(const AccountCreateReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountCreateReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.AccountCreateReq";
  }
  protected:
  explicit AccountCreateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bank_2eproto);
    return ::descriptor_table_bank_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNameFieldNumber = 1,
  };
  // string account_name = 1;
  void clear_account_name();
  const std::string& account_name() const;
  void set_account_name(const std::string& value);
  void set_account_name(std::string&& value);
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  std::string* mutable_account_name();
  std::string* release_account_name();
  void set_allocated_account_name(std::string* account_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_account_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_account_name(
      std::string* account_name);
  private:
  const std::string& _internal_account_name() const;
  void _internal_set_account_name(const std::string& value);
  std::string* _internal_mutable_account_name();
  public:

  // @@protoc_insertion_point(class_scope:bank.AccountCreateReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class AccountCreateResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.AccountCreateResp) */ {
 public:
  inline AccountCreateResp() : AccountCreateResp(nullptr) {};
  virtual ~AccountCreateResp();

  AccountCreateResp(const AccountCreateResp& from);
  AccountCreateResp(AccountCreateResp&& from) noexcept
    : AccountCreateResp() {
    *this = ::std::move(from);
  }

  inline AccountCreateResp& operator=(const AccountCreateResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountCreateResp& operator=(AccountCreateResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountCreateResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountCreateResp* internal_default_instance() {
    return reinterpret_cast<const AccountCreateResp*>(
               &_AccountCreateResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AccountCreateResp& a, AccountCreateResp& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountCreateResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountCreateResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountCreateResp* New() const final {
    return CreateMaybeMessage<AccountCreateResp>(nullptr);
  }

  AccountCreateResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountCreateResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountCreateResp& from);
  void MergeFrom(const AccountCreateResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountCreateResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.AccountCreateResp";
  }
  protected:
  explicit AccountCreateResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bank_2eproto);
    return ::descriptor_table_bank_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewAmountFieldNumber = 1,
  };
  // int64 new_amount = 1;
  void clear_new_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 new_amount() const;
  void set_new_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_new_amount() const;
  void _internal_set_new_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bank.AccountCreateResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 new_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class AmountAddReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.AmountAddReq) */ {
 public:
  inline AmountAddReq() : AmountAddReq(nullptr) {};
  virtual ~AmountAddReq();

  AmountAddReq(const AmountAddReq& from);
  AmountAddReq(AmountAddReq&& from) noexcept
    : AmountAddReq() {
    *this = ::std::move(from);
  }

  inline AmountAddReq& operator=(const AmountAddReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AmountAddReq& operator=(AmountAddReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AmountAddReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AmountAddReq* internal_default_instance() {
    return reinterpret_cast<const AmountAddReq*>(
               &_AmountAddReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AmountAddReq& a, AmountAddReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AmountAddReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AmountAddReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AmountAddReq* New() const final {
    return CreateMaybeMessage<AmountAddReq>(nullptr);
  }

  AmountAddReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AmountAddReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AmountAddReq& from);
  void MergeFrom(const AmountAddReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AmountAddReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.AmountAddReq";
  }
  protected:
  explicit AmountAddReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bank_2eproto);
    return ::descriptor_table_bank_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNameFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string account_name = 1;
  void clear_account_name();
  const std::string& account_name() const;
  void set_account_name(const std::string& value);
  void set_account_name(std::string&& value);
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  std::string* mutable_account_name();
  std::string* release_account_name();
  void set_allocated_account_name(std::string* account_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_account_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_account_name(
      std::string* account_name);
  private:
  const std::string& _internal_account_name() const;
  void _internal_set_account_name(const std::string& value);
  std::string* _internal_mutable_account_name();
  public:

  // int64 amount = 2;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bank.AmountAddReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class AmountAddResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.AmountAddResp) */ {
 public:
  inline AmountAddResp() : AmountAddResp(nullptr) {};
  virtual ~AmountAddResp();

  AmountAddResp(const AmountAddResp& from);
  AmountAddResp(AmountAddResp&& from) noexcept
    : AmountAddResp() {
    *this = ::std::move(from);
  }

  inline AmountAddResp& operator=(const AmountAddResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AmountAddResp& operator=(AmountAddResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AmountAddResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AmountAddResp* internal_default_instance() {
    return reinterpret_cast<const AmountAddResp*>(
               &_AmountAddResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AmountAddResp& a, AmountAddResp& b) {
    a.Swap(&b);
  }
  inline void Swap(AmountAddResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AmountAddResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AmountAddResp* New() const final {
    return CreateMaybeMessage<AmountAddResp>(nullptr);
  }

  AmountAddResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AmountAddResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AmountAddResp& from);
  void MergeFrom(const AmountAddResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AmountAddResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.AmountAddResp";
  }
  protected:
  explicit AmountAddResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bank_2eproto);
    return ::descriptor_table_bank_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewAmountFieldNumber = 1,
  };
  // int64 new_amount = 1;
  void clear_new_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 new_amount() const;
  void set_new_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_new_amount() const;
  void _internal_set_new_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bank.AmountAddResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 new_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class AmountSubReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.AmountSubReq) */ {
 public:
  inline AmountSubReq() : AmountSubReq(nullptr) {};
  virtual ~AmountSubReq();

  AmountSubReq(const AmountSubReq& from);
  AmountSubReq(AmountSubReq&& from) noexcept
    : AmountSubReq() {
    *this = ::std::move(from);
  }

  inline AmountSubReq& operator=(const AmountSubReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AmountSubReq& operator=(AmountSubReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AmountSubReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AmountSubReq* internal_default_instance() {
    return reinterpret_cast<const AmountSubReq*>(
               &_AmountSubReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AmountSubReq& a, AmountSubReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AmountSubReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AmountSubReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AmountSubReq* New() const final {
    return CreateMaybeMessage<AmountSubReq>(nullptr);
  }

  AmountSubReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AmountSubReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AmountSubReq& from);
  void MergeFrom(const AmountSubReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AmountSubReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.AmountSubReq";
  }
  protected:
  explicit AmountSubReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bank_2eproto);
    return ::descriptor_table_bank_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNameFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string account_name = 1;
  void clear_account_name();
  const std::string& account_name() const;
  void set_account_name(const std::string& value);
  void set_account_name(std::string&& value);
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  std::string* mutable_account_name();
  std::string* release_account_name();
  void set_allocated_account_name(std::string* account_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_account_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_account_name(
      std::string* account_name);
  private:
  const std::string& _internal_account_name() const;
  void _internal_set_account_name(const std::string& value);
  std::string* _internal_mutable_account_name();
  public:

  // int64 amount = 2;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bank.AmountSubReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class AmountSubResp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.AmountSubResp) */ {
 public:
  inline AmountSubResp() : AmountSubResp(nullptr) {};
  virtual ~AmountSubResp();

  AmountSubResp(const AmountSubResp& from);
  AmountSubResp(AmountSubResp&& from) noexcept
    : AmountSubResp() {
    *this = ::std::move(from);
  }

  inline AmountSubResp& operator=(const AmountSubResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AmountSubResp& operator=(AmountSubResp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AmountSubResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AmountSubResp* internal_default_instance() {
    return reinterpret_cast<const AmountSubResp*>(
               &_AmountSubResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AmountSubResp& a, AmountSubResp& b) {
    a.Swap(&b);
  }
  inline void Swap(AmountSubResp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AmountSubResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AmountSubResp* New() const final {
    return CreateMaybeMessage<AmountSubResp>(nullptr);
  }

  AmountSubResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AmountSubResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AmountSubResp& from);
  void MergeFrom(const AmountSubResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AmountSubResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.AmountSubResp";
  }
  protected:
  explicit AmountSubResp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bank_2eproto);
    return ::descriptor_table_bank_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewAmountFieldNumber = 1,
  };
  // int64 new_amount = 1;
  void clear_new_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 new_amount() const;
  void set_new_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_new_amount() const;
  void _internal_set_new_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:bank.AmountSubResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 new_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class Empty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {};
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bank_2eproto);
    return ::descriptor_table_bank_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bank.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BankCreateReq

// int64 cap = 1;
inline void BankCreateReq::clear_cap() {
  cap_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BankCreateReq::_internal_cap() const {
  return cap_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BankCreateReq::cap() const {
  // @@protoc_insertion_point(field_get:bank.BankCreateReq.cap)
  return _internal_cap();
}
inline void BankCreateReq::_internal_set_cap(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cap_ = value;
}
inline void BankCreateReq::set_cap(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cap(value);
  // @@protoc_insertion_point(field_set:bank.BankCreateReq.cap)
}

// -------------------------------------------------------------------

// BankCreateResp

// int64 cap = 1;
inline void BankCreateResp::clear_cap() {
  cap_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BankCreateResp::_internal_cap() const {
  return cap_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BankCreateResp::cap() const {
  // @@protoc_insertion_point(field_get:bank.BankCreateResp.cap)
  return _internal_cap();
}
inline void BankCreateResp::_internal_set_cap(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cap_ = value;
}
inline void BankCreateResp::set_cap(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cap(value);
  // @@protoc_insertion_point(field_set:bank.BankCreateResp.cap)
}

// -------------------------------------------------------------------

// AccountCreateReq

// string account_name = 1;
inline void AccountCreateReq::clear_account_name() {
  account_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AccountCreateReq::account_name() const {
  // @@protoc_insertion_point(field_get:bank.AccountCreateReq.account_name)
  return _internal_account_name();
}
inline void AccountCreateReq::set_account_name(const std::string& value) {
  _internal_set_account_name(value);
  // @@protoc_insertion_point(field_set:bank.AccountCreateReq.account_name)
}
inline std::string* AccountCreateReq::mutable_account_name() {
  // @@protoc_insertion_point(field_mutable:bank.AccountCreateReq.account_name)
  return _internal_mutable_account_name();
}
inline const std::string& AccountCreateReq::_internal_account_name() const {
  return account_name_.Get();
}
inline void AccountCreateReq::_internal_set_account_name(const std::string& value) {
  
  account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AccountCreateReq::set_account_name(std::string&& value) {
  
  account_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bank.AccountCreateReq.account_name)
}
inline void AccountCreateReq::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bank.AccountCreateReq.account_name)
}
inline void AccountCreateReq::set_account_name(const char* value,
    size_t size) {
  
  account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bank.AccountCreateReq.account_name)
}
inline std::string* AccountCreateReq::_internal_mutable_account_name() {
  
  return account_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AccountCreateReq::release_account_name() {
  // @@protoc_insertion_point(field_release:bank.AccountCreateReq.account_name)
  return account_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountCreateReq::set_allocated_account_name(std::string* account_name) {
  if (account_name != nullptr) {
    
  } else {
    
  }
  account_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bank.AccountCreateReq.account_name)
}
inline std::string* AccountCreateReq::unsafe_arena_release_account_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bank.AccountCreateReq.account_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return account_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AccountCreateReq::unsafe_arena_set_allocated_account_name(
    std::string* account_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (account_name != nullptr) {
    
  } else {
    
  }
  account_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      account_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bank.AccountCreateReq.account_name)
}

// -------------------------------------------------------------------

// AccountCreateResp

// int64 new_amount = 1;
inline void AccountCreateResp::clear_new_amount() {
  new_amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountCreateResp::_internal_new_amount() const {
  return new_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AccountCreateResp::new_amount() const {
  // @@protoc_insertion_point(field_get:bank.AccountCreateResp.new_amount)
  return _internal_new_amount();
}
inline void AccountCreateResp::_internal_set_new_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  new_amount_ = value;
}
inline void AccountCreateResp::set_new_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_new_amount(value);
  // @@protoc_insertion_point(field_set:bank.AccountCreateResp.new_amount)
}

// -------------------------------------------------------------------

// AmountAddReq

// string account_name = 1;
inline void AmountAddReq::clear_account_name() {
  account_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AmountAddReq::account_name() const {
  // @@protoc_insertion_point(field_get:bank.AmountAddReq.account_name)
  return _internal_account_name();
}
inline void AmountAddReq::set_account_name(const std::string& value) {
  _internal_set_account_name(value);
  // @@protoc_insertion_point(field_set:bank.AmountAddReq.account_name)
}
inline std::string* AmountAddReq::mutable_account_name() {
  // @@protoc_insertion_point(field_mutable:bank.AmountAddReq.account_name)
  return _internal_mutable_account_name();
}
inline const std::string& AmountAddReq::_internal_account_name() const {
  return account_name_.Get();
}
inline void AmountAddReq::_internal_set_account_name(const std::string& value) {
  
  account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AmountAddReq::set_account_name(std::string&& value) {
  
  account_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bank.AmountAddReq.account_name)
}
inline void AmountAddReq::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bank.AmountAddReq.account_name)
}
inline void AmountAddReq::set_account_name(const char* value,
    size_t size) {
  
  account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bank.AmountAddReq.account_name)
}
inline std::string* AmountAddReq::_internal_mutable_account_name() {
  
  return account_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AmountAddReq::release_account_name() {
  // @@protoc_insertion_point(field_release:bank.AmountAddReq.account_name)
  return account_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AmountAddReq::set_allocated_account_name(std::string* account_name) {
  if (account_name != nullptr) {
    
  } else {
    
  }
  account_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bank.AmountAddReq.account_name)
}
inline std::string* AmountAddReq::unsafe_arena_release_account_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bank.AmountAddReq.account_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return account_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AmountAddReq::unsafe_arena_set_allocated_account_name(
    std::string* account_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (account_name != nullptr) {
    
  } else {
    
  }
  account_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      account_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bank.AmountAddReq.account_name)
}

// int64 amount = 2;
inline void AmountAddReq::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AmountAddReq::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AmountAddReq::amount() const {
  // @@protoc_insertion_point(field_get:bank.AmountAddReq.amount)
  return _internal_amount();
}
inline void AmountAddReq::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amount_ = value;
}
inline void AmountAddReq::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:bank.AmountAddReq.amount)
}

// -------------------------------------------------------------------

// AmountAddResp

// int64 new_amount = 1;
inline void AmountAddResp::clear_new_amount() {
  new_amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AmountAddResp::_internal_new_amount() const {
  return new_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AmountAddResp::new_amount() const {
  // @@protoc_insertion_point(field_get:bank.AmountAddResp.new_amount)
  return _internal_new_amount();
}
inline void AmountAddResp::_internal_set_new_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  new_amount_ = value;
}
inline void AmountAddResp::set_new_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_new_amount(value);
  // @@protoc_insertion_point(field_set:bank.AmountAddResp.new_amount)
}

// -------------------------------------------------------------------

// AmountSubReq

// string account_name = 1;
inline void AmountSubReq::clear_account_name() {
  account_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AmountSubReq::account_name() const {
  // @@protoc_insertion_point(field_get:bank.AmountSubReq.account_name)
  return _internal_account_name();
}
inline void AmountSubReq::set_account_name(const std::string& value) {
  _internal_set_account_name(value);
  // @@protoc_insertion_point(field_set:bank.AmountSubReq.account_name)
}
inline std::string* AmountSubReq::mutable_account_name() {
  // @@protoc_insertion_point(field_mutable:bank.AmountSubReq.account_name)
  return _internal_mutable_account_name();
}
inline const std::string& AmountSubReq::_internal_account_name() const {
  return account_name_.Get();
}
inline void AmountSubReq::_internal_set_account_name(const std::string& value) {
  
  account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AmountSubReq::set_account_name(std::string&& value) {
  
  account_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bank.AmountSubReq.account_name)
}
inline void AmountSubReq::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:bank.AmountSubReq.account_name)
}
inline void AmountSubReq::set_account_name(const char* value,
    size_t size) {
  
  account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bank.AmountSubReq.account_name)
}
inline std::string* AmountSubReq::_internal_mutable_account_name() {
  
  return account_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AmountSubReq::release_account_name() {
  // @@protoc_insertion_point(field_release:bank.AmountSubReq.account_name)
  return account_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AmountSubReq::set_allocated_account_name(std::string* account_name) {
  if (account_name != nullptr) {
    
  } else {
    
  }
  account_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bank.AmountSubReq.account_name)
}
inline std::string* AmountSubReq::unsafe_arena_release_account_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:bank.AmountSubReq.account_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return account_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AmountSubReq::unsafe_arena_set_allocated_account_name(
    std::string* account_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (account_name != nullptr) {
    
  } else {
    
  }
  account_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      account_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bank.AmountSubReq.account_name)
}

// int64 amount = 2;
inline void AmountSubReq::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AmountSubReq::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AmountSubReq::amount() const {
  // @@protoc_insertion_point(field_get:bank.AmountSubReq.amount)
  return _internal_amount();
}
inline void AmountSubReq::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amount_ = value;
}
inline void AmountSubReq::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:bank.AmountSubReq.amount)
}

// -------------------------------------------------------------------

// AmountSubResp

// int64 new_amount = 1;
inline void AmountSubResp::clear_new_amount() {
  new_amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AmountSubResp::_internal_new_amount() const {
  return new_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AmountSubResp::new_amount() const {
  // @@protoc_insertion_point(field_get:bank.AmountSubResp.new_amount)
  return _internal_new_amount();
}
inline void AmountSubResp::_internal_set_new_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  new_amount_ = value;
}
inline void AmountSubResp::set_new_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_new_amount(value);
  // @@protoc_insertion_point(field_set:bank.AmountSubResp.new_amount)
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bank

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bank_2eproto
